suite: Cloud Run Service
templates:
  - cloudrun.yaml
tests:
  # Basic Service Tests
  - it: should render the service manifest if type is set to service
    set:
      type: 'service'
    asserts:
      - equal:
          path: kind
          value: Service

  # Metadata Tests
  - it: should set custom labels when provided
    set:
      labels:
        app: myapp
        environment: prod
    asserts:
      - equal:
          path: metadata.labels.app
          value: myapp
      - equal:
          path: metadata.labels.environment
          value: prod

  # Annotation Tests
  - it: should set custom annotations when provided
    set:
      annotations:
        'custom.annotation/value': 'test'
    asserts:
      - equal:
          path: metadata.annotations["custom.annotation/value"]
          value: 'test'

  # Service Account Tests
  - it: should set the service account when provided
    set:
      serviceAccountName: my-service-account
    asserts:
      - equal:
          path: spec.template.spec.serviceAccountName
          value: my-service-account

  # Autoscaling Tests
  - it: should set autoscaling configuration when provided
    set:
      autoscaling:
        minScale: 1
        maxScale: 10
    asserts:
      - equal:
          path: spec.template.metadata.annotations["autoscaling.knative.dev/minScale"]
          value: '1'
      - equal:
          path: spec.template.metadata.annotations["autoscaling.knative.dev/maxScale"]
          value: '10'

  # Container Configuration Tests
  - it: should set container concurrency when provided
    set:
      containerConcurrency: 80
    asserts:
      - equal:
          path: spec.template.spec.containerConcurrency
          value: 80

  - it: should set timeout seconds when provided
    set:
      timeoutSeconds: 6000
    asserts:
      - equal:
          path: spec.template.spec.timeoutSeconds
          value: 6000

  # Storage Tests
  - it: should set volumes when provided
    set:
      volumes:
        - name: config
          secret:
            secretName: my-secret
    asserts:
      - equal:
          path: spec.template.spec.volumes[0].name
          value: config
      - equal:
          path: spec.template.spec.volumes[0].secret.secretName
          value: my-secret

  - it: should set volume mounts when provided
    set:
      volumeMounts:
        - name: config
          mountPath: /etc/config
    asserts:
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[0].name
          value: config
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[0].mountPath
          value: /etc/config

  # Network Configuration Tests
  - it: should set VPC configuration when provided
    set:
      vpc:
        connector: my-connector
        egress: private-ranges-only
    asserts:
      - equal:
          path: spec.template.metadata.annotations["run.googleapis.com/vpc-access-connector"]
          value: my-connector
      - equal:
          path: spec.template.metadata.annotations["run.googleapis.com/vpc-access-egress"]
          value: private-ranges-only

  - it: should set VPC direct connection when network and subnetwork are provided
    set:
      vpc:
        network: my-network
        subnetwork: my-subnetwork
        egress: all-traffic
    asserts:
      - equal:
          path: spec.template.metadata.annotations["run.googleapis.com/network-interfaces"]
          value: '[{"network":"my-network","subnetwork":"my-subnetwork"}]'
      - equal:
          path: spec.template.metadata.annotations["run.googleapis.com/vpc-access-egress"]
          value: all-traffic

  - it: should not set egress when no VPC connection is configured
    set:
      vpc:
        network: null
        subnetwork: null
        connector: null
        egress: all-traffic
    asserts:
      - isNull:
          path: spec.template.metadata.annotations["run.googleapis.com/vpc-access-egress"]
      - isNull:
          path: spec.template.metadata.annotations["run.googleapis.com/network-interfaces"]

  - it: should fail with error message if network is set without subnetwork
    set:
      vpc:
        network: my-network
        subnetwork: null
    asserts:
      - failedTemplate:
          errorMessage: 'VPC network and subnetwork must be specified together'

  - it: should fail with error message if subnetwork is set without network
    set:
      vpc:
        network: null
        subnetwork: my-subnetwork
    asserts:
      - failedTemplate:
          errorMessage: 'VPC network and subnetwork must be specified together'

  - it: should fail with error message if both connector and network are set
    set:
      vpc:
        network: my-network
        subnetwork: my-subnetwork
        connector: my-connector
    asserts:
      - failedTemplate:
          errorMessage: 'Cannot specify both VPC connector and direct VPC access (network/subnetwork)'

  - it: should fail with error message if both connector and subnetwork are set
    set:
      vpc:
        network: null
        subnetwork: my-subnetwork
        connector: my-connector
    asserts:
      - failedTemplate:
          errorMessage: 'Cannot specify both VPC connector and direct VPC access (network/subnetwork)'

  # Database Configuration Tests
  - it: should set Cloud SQL configuration when provided
    set:
      cloudSql:
        instances: project:region:instance
    asserts:
      - equal:
          path: spec.template.metadata.annotations["run.googleapis.com/cloudsql-instances"]
          value: project:region:instance

  # Execution Configuration Tests
  - it: should set CPU throttling when provided
    set:
      resources:
        cpuThrottling: false
    asserts:
      - equal:
          path: spec.template.metadata.annotations["run.googleapis.com/cpu-throttling"]
          value: 'false'

  - it: should set execution environment when provided
    set:
      executionEnvironment: gen1
    asserts:
      - equal:
          path: spec.template.metadata.annotations["run.googleapis.com/execution-environment"]
          value: gen1

  # Traffic Configuration Tests
  - it: should set traffic configuration when provided
    set:
      traffic:
        - percent: 80
          revisionName: v1
        - percent: 20
          latestRevision: true
    asserts:
      - equal:
          path: spec.traffic[0].percent
          value: 80
      - equal:
          path: spec.traffic[0].revisionName
          value: v1
      - equal:
          path: spec.traffic[1].percent
          value: 20
      - equal:
          path: spec.traffic[1].latestRevision
          value: true

  # Launch Stage Tests
  - it: should set launch stage when provided
    set:
      launchStage: ALPHA
    asserts:
      - equal:
          path: metadata.annotations["run.googleapis.com/launch-stage"]
          value: ALPHA

  - it: should default to GA launch stage when not provided
    asserts:
      - equal:
          path: metadata.annotations["run.googleapis.com/launch-stage"]
          value: GA
  # Description Tests
  - it: should set description when provided
    set:
      description: My service description
    asserts:
      - equal:
          path: metadata.annotations["run.googleapis.com/description"]
          value: My service description

  - it: should not set description when not provided
    asserts:
      - isNull:
          path: metadata.annotations["run.googleapis.com/description"]

  # Ingress Tests
  - it: should set ingress when provided
    set:
      ingress: internal
    asserts:
      - equal:
          path: metadata.annotations["run.googleapis.com/ingress"]
          value: internal

  - it: should default to 'all' for ingress when not provided
    asserts:
      - equal:
          path: metadata.annotations["run.googleapis.com/ingress"]
          value: all

  # Session Affinity Tests
  - it: should set session affinity when enabled
    set:
      sessionAffinity: true
    asserts:
      - equal:
          path: spec.template.metadata.annotations["run.googleapis.com/sessionAffinity"]
          value: 'true'

  - it: should not set session affinity when disabled
    set:
      sessionAffinity: false
    asserts:
      - isNull:
          path: spec.template.metadata.annotations["run.googleapis.com/sessionAffinity"]

  # Startup Probe Tests
  - it: should set startup probe when provided
    set:
      startupProbe:
        httpGet:
          path: /healthz
          port: 8080
        initialDelaySeconds: 10
        periodSeconds: 5
        failureThreshold: 3
    asserts:
      - equal:
          path: spec.template.spec.containers[0].startupProbe.httpGet.path
          value: /healthz
      - equal:
          path: spec.template.spec.containers[0].startupProbe.httpGet.port
          value: 8080
      - equal:
          path: spec.template.spec.containers[0].startupProbe.initialDelaySeconds
          value: 10
      - equal:
          path: spec.template.spec.containers[0].startupProbe.periodSeconds
          value: 5
      - equal:
          path: spec.template.spec.containers[0].startupProbe.failureThreshold
          value: 3

  - it: should not set startup probe when not provided
    set:
      startupProbe: null
    asserts:
      - isNull:
          path: spec.template.spec.containers[0].startupProbe

  # Resource Tests
  - it: should quote CPU and memory values
    set:
      resources:
        limits:
          cpu: 1
          memory: 512Mi
    asserts:
      - equal:
          path: spec.template.spec.containers[0].resources.limits.cpu
          value: '1'
      - equal:
          path: spec.template.spec.containers[0].resources.limits.memory
          value: '512Mi'

  # Add additional test for different memory formats
  - it: should support different memory formats
    set:
      resources:
        limits:
          memory: 1Gi
    asserts:
      - equal:
          path: spec.template.spec.containers[0].resources.limits.memory
          value: '1Gi'

  - it: should support megabyte memory format
    set:
      resources:
        limits:
          memory: 512M
    asserts:
      - equal:
          path: spec.template.spec.containers[0].resources.limits.memory
          value: '512M'

  # Environment Variable Tests
  - it: should map environment variables from key-value pairs to list
    set:
      env:
        FOO: bar
        HELLO: world
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          any: true
          content:
            name: FOO
            value: bar
      - contains:
          path: spec.template.spec.containers[0].env
          any: true
          content:
            name: HELLO
            value: world

  - it: should handle empty environment variables
    set:
      env: {}
    asserts:
      - isNull:
          path: spec.template.spec.containers[0].env
  - it: should handle environment variables with numeric values
    set:
      env:
        PORT: 8080
        COUNT: 42
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          any: true
          content:
            name: PORT
            value: '8080'
      - contains:
          path: spec.template.spec.containers[0].env
          any: true
          content:
            name: COUNT
            value: '42'

  # Region Tests
  - it: should not set a region when not provided
    asserts:
      - isNull:
          path: metadata.annotations["run.googleapis.com/region"]

  - it: should create the region annotation when provided
    set:
      region: us-central1
    asserts:
      - equal:
          path: metadata.annotations["run.googleapis.com/region"]
          value: us-central1
